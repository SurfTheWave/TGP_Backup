<apex:page controller="ImportSrat" showHeader="false" id="page">
<apex:includeScript value="{!$Resource.jszip}"/>
<apex:includeScript value="{!$Resource.Shim}"/>
<apex:includeScript value="{!$Resource.xls}"/>
<apex:includeScript value="{!$Resource.xlsworker}"/>
<apex:includeScript value="{!$Resource.xlsworker1}"/>
<apex:includeScript value="{!$Resource.xlsworker2}"/>
  <style>
        #drop{
        border:0px;
        -moz-border-radius:0px;
        -webkit-border-radius:0px;
        border-radius:0px;
        padding:0px;
        text-align:center;
        font:20pt bold,"Vollkorn";color:#bbb
        }
        #b64data{
        width:100%;
        }
        a:hover{
        background-color:#DCDCDC;
        }
        </style>
<apex:pageMessages ></apex:pageMessages>
<apex:form id="form1" >
</apex:form>
<apex:outputPanel >
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" />
</head>
<body>
<apex:form id="frm2">
<br/><br/><br/><br/>
   <div id="drop"></div>
 
    <table border="0px" style="width:100%">

        <tr>
            <td style="width:30%">
               <center> <b>File Upload :</b></center>
            </td>
            <td style="width:30%">
                <apex:inputFile value="{!fileBody}" id="xlf"/>
            </td>
        </tr>
    </table>
      
    <input type="checkbox" name="useworker" style="width: 0%; height: 0px; overflow: auto; display:none;"/>
    <input type="checkbox" name="xferable" style="width: 0%; height: 0px; overflow: auto; display:none;"/>
    <input type="checkbox" name="userabs"  style="width: 0%; height: 0px; overflow: auto; display:none;" />
    <br />
    <apex:inputHidden id="fileFullDataHidden" value="{!fileFullData}" /><!--Need To Check-->
    <apex:inputHidden id="dropFileNameHidden" value="{!dropFileName}"  />
    <!--<apex:inputHidden id="uploadFileAtteHidden" value="{!uploadFileAtt}" /> Need To Check-->
    <apex:inputHidden id="SratLevel1" value="{!allLines_SratLevel1}" />
    <apex:inputHidden id="SratLevel2" value="{!allLines_SratLevel2}"  />
    <center> 
       
    <div id="showUpload" style="display:none">
        <apex:commandButton action="{!UploadFile}" value="  Upload File  " />
        <p><i>The browse and upload functionality works on Google  <a href="https://www.google.com/intl/en/chrome/" target ="_blank"><b>Chrome</b></a> and Mozilla <a href ="https://www.mozilla.org/" target ="_blank"><b>Firefox</b></a> browsers ONLY.</i></p>
    </div>
    <div id="disableUpload" >
        <apex:commandButton action="{!UploadFile}" value="  Upload File  " disabled="true" />
        <p><i>The browse and upload functionality works on Google  <a href="https://www.google.com/intl/en/chrome/" target ="_blank"><b>Chrome</b></a> and Mozilla <a href ="https://www.mozilla.org/" target ="_blank"><b>Firefox</b></a> browsers ONLY.</i></p>
    </div>
    </center> 
    
</apex:form>
<br />
<script>
var rABS = typeof FileReader !== "undefined" && typeof FileReader.prototype !== "undefined" && typeof FileReader.prototype.readAsBinaryString !== "undefined";
if(!rABS) {
    document.getElementsByName("userabs")[0].disabled = true;
    document.getElementsByName("userabs")[0].checked = false;
}
var use_worker = typeof Worker !== 'undefined';
if(!use_worker) {
    document.getElementsByName("useworker")[0].disabled = true;
    document.getElementsByName("useworker")[0].checked = false;
}
var transferable = use_worker;
if(!transferable) {
    document.getElementsByName("xferable")[0].disabled = true;
    document.getElementsByName("xferable")[0].checked = false;
}
var wtf_mode = false;
function fixdata(data) {
    var o = "", l = 0, w = 10240;
    for(; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint8Array(data.slice(l*w,l*w+w)));
    o+=String.fromCharCode.apply(null, new Uint8Array(data.slice(l*w)));
    return o;
}
function ab2str(data) {
    var o = "", l = 0, w = 10240;
    for(; l<data.byteLength/w; ++l) o+=String.fromCharCode.apply(null,new Uint16Array(data.slice(l*w,l*w+w)));
    o+=String.fromCharCode.apply(null, new Uint16Array(data.slice(l*w)));
    return o;
}
function s2ab(s) {
    var b = new ArrayBuffer(s.length*2), v = new Uint16Array(b);
    for (var i=0; i != s.length; ++i) v[i] = s.charCodeAt(i);
    return [v, b];
}
function xlsworker_noxfer(data, cb) {
    var worker = new Worker('./xlsworker.js');
    worker.onmessage = function(e) {
        switch(e.data.t) {
            case 'ready': break;
            case 'e': console.error(e.data.d); break;
            case 'xls': cb(JSON.parse(e.data.d)); break;
        }
    };
    var arr = rABS ? data : btoa(fixdata(data));
    worker.postMessage({d:arr,b:rABS});
}
function xlsworker_xfer(data, cb) {
    var worker = new Worker(rABS ? './xlsworker.js' : './xlsworker.js');
    worker.onmessage = function(e) {
        switch(e.data.t) {
            case 'ready': break;
            case 'e': console.error(e.data.d); break;
            default: xx=ab2str(e.data).replace(/\n/g,"\\n").replace(/\r/g,"\\r"); console.log("done"); cb(JSON.parse(xx)); break;
        }
    };
    if(rABS) {
        var val = s2ab(data);
        worker.postMessage(val[1], [val[1]]);
    } else {
        worker.postMessage(data, [data]);
    }
}
function xlsworker(data, cb) {
    transferable = document.getElementsByName("xferable")[0].checked;
    if(transferable) xlsworker_xfer(data, cb);
    else xlsworker_noxfer(data, cb);
}
function get_radio_value( radioName ) {
    var radios = document.getElementsByName( radioName );
    for( var i = 0; i < radios.length; i++ ) {
        if( radios[i].checked || radios.length === 1 ) {
            return radios[i].value;
        }
    }
}
function to_json(workbook) {
    var result = {};
    workbook.SheetNames.forEach(function(sheetName) {
        var roa = XLS.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
        if(roa.length > 0){
            result[sheetName] = roa;
        }
    });
    return result;
}
function to_csv(workbook) {
    var result = [];
    workbook.SheetNames.forEach(function(sheetName) {
        var csv = XLS.utils.sheet_to_csv(workbook.Sheets[sheetName]);
        if(csv.length > 0){
            result.push("SHEET: " + sheetName);
            result.push("");
            result.push(csv);
        }
    });
    return result.join("\n");
}
function to_formulae(workbook) {
    var result = [];
    workbook.SheetNames.forEach(function(sheetName) {
        var formulae = XLS.utils.get_formulae(workbook.Sheets[sheetName]);
        if(formulae.length > 0){
            result.push("SHEET: " + sheetName);
            result.push("");
            result.push(formulae.join("\n"));
        }
    });
    return result.join("\n");
}
var tarea = document.getElementById('b64data');
function b64it() {
    if(typeof console !== 'undefined') console.log("onload", new Date());
    var wb = XLS.read(tarea.value, {type: 'base64',WTF:wtf_mode});
    process_wb(wb);
}
function process_wb(wb) {
    if(use_worker) XLS.SSF.load_table(wb.SSF);
    var output = "";
    switch(get_radio_value("format")) {
        case "json":
            output = JSON.stringify(to_json(wb), 2, 2);
            break;
        case "form":
            output = to_formulae(wb);
            break;
        default:
            output = to_csv(wb);
            var fileAllData=output;
                                var allLines = output.split("SHEET: ");
                                for (i = 0; i < allLines.length; i++) {
                                    if(allLines[i] != null && allLines[i] != ""){
                                        if(allLines[i].indexOf("SratLevel2Export")> -1){
                                            var checkTabName=allLines[i].split("SratLevel2Export");
                                            if(checkTabName[0].trim()==''){
                                                document.getElementById("{!$Component.frm2.SratLevel2}").value=allLines[i];
                                            }
                                        }
                                        if(allLines[i].indexOf("SratLevel1Export")> -1){
                                            var checkTabName=allLines[i].split("SratLevel1Export");
                                            if(checkTabName[0].trim()==''){
                                                document.getElementById("{!$Component.frm2.SratLevel1}").value=allLines[i];
                                            }
                                        }
                                        
                                    }
                               }
    }
    if(out.innerText === undefined) out.textContent = output;
    else out.innerText = output;
    if(typeof console !== 'undefined') console.log("output", new Date());
}
var drop = document.getElementById('drop');
function handleDrop(e) {
    e.stopPropagation();
    e.preventDefault();
    rABS = document.getElementsByName("userabs")[0].checked;
    use_worker = document.getElementsByName("useworker")[0].checked;
    var files = e.dataTransfer.files;
    var f = files[0];
    {
        var reader = new FileReader();
        var name = f.name;
        reader.onload = function(e) {
            if(typeof console !== 'undefined') console.log("onload", new Date(), rABS, use_worker);
            var data = e.target.result;
            if(use_worker) {
                xlsworker(data, process_wb);
            } else {
                var wb;
                if(rABS) {
                    wb = XLS.read(data, {type: 'binary'});
                } else {
                    var arr = fixdata(data);
                    wb = XLS.read(btoa(arr), {type: 'base64'});
                }
                process_wb(wb);
            }
        };
        if(rABS) reader.readAsBinaryString(f);
        else reader.readAsArrayBuffer(f);
    }
}
function handleDragover(e) {
    e.stopPropagation();
    e.preventDefault();
    e.dataTransfer.dropEffect = 'copy';
}
if(drop.addEventListener) {
    drop.addEventListener('dragenter', handleDragover, false);
    drop.addEventListener('dragover', handleDragover, false);
    drop.addEventListener('drop', handleDrop, false);
}
var xlf = document.getElementById("{!$Component.frm2.xlf}");
function handleFile(e) {
    document.getElementById('showUpload').style.display = 'none';
                document.getElementById('disableUpload').style.display = 'block';
    rABS = document.getElementsByName("userabs")[0].checked;
    use_worker = document.getElementsByName("useworker")[0].checked;
    var files = e.target.files;
    var f = files[0];
    {
        var reader = new FileReader();
        var name = f.name;
        var dropFileName = f.name;
                                document.getElementById("{!$Component.frm2.dropFileNameHidden}").value=dropFileName; 
                                
        reader.onload = function(e) {
            if(typeof console !== 'undefined') console.log("onload", new Date(), rABS, use_worker);
            var data = e.target.result;
            if(use_worker) {
                xlsworker(data, process_wb);
            } else {
                var wb;
                if(rABS) {
                    wb = XLS.read(data, {type: 'binary'});
                } else {
                    var arr = fixdata(data);
                    wb = XLS.read(btoa(arr), {type: 'base64'});
                }
                process_wb(wb);
            }
        };
        if(rABS) reader.readAsBinaryString(f);
        else reader.readAsArrayBuffer(f);
    }
document.getElementById('showUpload').style.display = 'block';
                document.getElementById('disableUpload').style.display = 'none';
}
if(xlf.addEventListener) xlf.addEventListener('change', handleFile, false);
 
</script>
</body>
</apex:outputPanel>
</apex:page>